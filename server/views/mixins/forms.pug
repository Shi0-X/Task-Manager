- const getInputName = (property) => `data[${property}]`
- const getInputId   = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - const propertyErrors = _.get(errors, propertyName)
  - const classLine      = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - const inputId        = getInputId(propertyName)
  .mb-3(class=(propertyErrors && 'has-danger'))
    label(for=inputId)= t(`views.users.fields.${propertyName}`)
    input(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(type="hidden" name="_method" value=method)
    button(type="submit")&attributes(attributes)
      block
